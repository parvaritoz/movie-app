import Head from "next/head";
import { useEffect, useState } from "react";
import MovieList from "../components/Genre/MovieList";
import GenreButton from "../components/Genre/GenreButton";

export default function Discover() {
  const [genres, setGenres] = useState([] as any[]);
  const [filterMovies, setFilterMovies] = useState([] as any[]);
  const [movies, setMovies] = useState([] as any[]);
  const [categoriID, setCategoriID] = useState("");

  /**
   *
   */
  async function fetchMovies() {
    const response = await fetch(
      `${process.env.NEXT_PUBLIC_API_URL}/movie/popular?api_key=${process.env.NEXT_PUBLIC_TMDB_API_KEY}&language=en-US`
    );
    const data = await response.json();
    setMovies(data.results);
  }

  /**
   * This function fetch the genre data from TMDB API
   * @returns genres
   */
  async function fetchGenre() {
    const response = await fetch(
      `${process.env.NEXT_PUBLIC_API_URL}/genre/movie/list?api_key=${process.env.NEXT_PUBLIC_TMDB_API_KEY}`
    );
    const data = await response.json();

    setGenres(data.genres);
  }

  useEffect(() => {
    fetchGenre();
    fetchMovies();
  }, []);

  /**
   *
   * @param text Id jag fÃ¥ tillbaka
   */
  const handleInput = (categoriID: string) => {
    const filterMovies = movies.filter((movie) =>
      movie.genre_ids.includes(categoriID)
    );
    setFilterMovies(filterMovies);
    setCategoriID(categoriID.toString());
  };

  {
    return (
      <>
        <Head>
          <title>Movie App - Discover</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="flex flex-row overflow-scroll scrollbar-hide text-white">
          {genres.map((genre, index: number) => (
            <GenreButton
              key={index}
              genre={genre}
              onClick={(text) => handleInput(text)}
              pressed={genre.id === parseInt(categoriID) ? true : false}
            />
          ))}
        </div>

        {categoriID !== "" && filterMovies && filterMovies.length === 0 && (
          <p className="text-white flex justify-center items-center mt-10 text-lg">
            No movies within this category
          </p>
        )}
        <MovieList genre={categoriID.length > 0 ? filterMovies : movies} />
      </>
    );
  }
}
